1. 位(bit) 计算机最小的数据单位 ，每一位 的状态只能是 0 或 1
2. 字节(byte) 由8个二进制位(bit)组成。它是最小的存储空间基本计量单位 0000 0000 => 1111 1111
3. 字 64位处理器 32位处理器含义 : 在一个时钟周期里面处理8个字节、4个字节的数据。64位计算机 的字 等于8个字节，32位计算机的字等于4个字节。字是计算机（cpu）进行数据处理和数据运算的基本单位。


4. 编码 
	4.1 显示在屏幕的文本，字符，是计算机不能直接处理的。计算机只认识位(bit) 和 字节(byte)。屏幕上显示的各种语言其实是以某种字符编码的方式保存的 。字符编码提供一种从计算机内存存储的内容到屏幕显示内容的映射。字符编码相当于一种“解码秘钥”，只有正确的编码才能将计算机存储的字节序列转变为人类可识别文字。
	4.2 AscII ,将英文字母、符号用数字进行代替，因为英文符号总共不超过128个，所以7bit 、一个字节即可表示所有英文符号，但是，中文，日文，韩文....字符远远超过英文字符，所以需要更多的字节来表示所有的字符，一般2个字节表示（2的16次方减1，总共65535个数字，足够表示所有中文了吧）
	4.3 编码方式 是将计算机可读的数字映射成人类可读的字符 的解码秘钥，没有密钥或者密钥错误，将会显示莫名其妙的信息。（如果不同的语言各自有自己的编码方式，那么....如果一篇文章有多种语言，该怎么显示，怎么搜索？使用哪种编码？根本没有所谓的纯文本，所以需要一直适用于所有语言的编码格式）
	4.4 unicode 适用于所有语言的编码格式，有一种Unicode的编码方式 一个字符使用4个字节，它叫做UTF-32。四个字节共32bit，所以叫UTF-32（那么UTF-8岂不是一个字符只用了一个字节???）
	4.4 UTF-8 表示一个字符是可变的，根据字符对应数字的大小确定需要多少个字符表示，但是最多不能超过3个字符，所以UTF-8相对可以节省更多的空间（不是绝对）
	4.5 打开一个文件时，怎么知道是utf-8还是utf-16，在文件开头的几个字节就是标志。EF BB BF 表示UTF-8 , FE FF 表示UTF-16
	4.6 UTF-8 怎么知道是几个字节表示一个字符的
		4.6.1 0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.
		4.6.2 110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元
		4.6.3 1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元.
		4.6.4 UTF-8 由于需要额外标识信息，所以 一个字节只有 128 ，两个字节只有2048 ，三个字节 ...
	4.7 前面都是Unicode版本1 内容，Unicode版本2，多出了UTF-32 ，所以UTF-16也是可变的，在2个字节和4个字节选择，UTF-8 在1-8个字节选择

	EF BB BF　　　 UTF-8
	FE FF　　　　　UTF-16/UCS-2, little endian
	FF FE　　　　　UTF-16/UCS-2, big endian
	FF FE 00 00　　UTF-32/UCS-4, little endian.
	00 00 FE FF　　UTF-32/UCS-4, big-endian.

5. 进制
    0x开头表示16进制 ，一个字节8位二进制，用16进制表示只需要2位，但是需要0x开头，所以经常看到 0x1F 0xAD 之类，都是16进制的一个字节
    以0开头的代表8进制
